# try:
#     milk = int(input('quantity of milk: '))
#     if milk == 0:
#         raise ValueError("we run out of milk")
#     print("cat is drinking milk happily")
# except ValueError as e:
#     print("eror ," , e)

# -------------------------------------

# try:
#     passengers = ["alice" , "bob" , "kate"]
#     print(passengers[3])
# except IndexError:
#     print("—ñ–Ω–¥–µ–∫—Å –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ —Å–ø–∏—Å–∫—É")

# -------------------------------------

# try:
#     result = 10 / 0
# except ZeroDivisionError:
#     print("–Ω–µ –º–æ–∂–ª–∏–≤–æ –ø–æ–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –Ω—É–ª—å , –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∏–±—É—Ö–Ω—É–≤üí£üí•")

# -------------------------------------

# try:
#     backpack = {
#         "apple" : 2,
#         "notebook" : 1 ,
#     }
#     print(backpack["key"])

# except KeyError:
#     print("—Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ–º–∞—î")

# -------------------------------------

# try:
#     num = 5
#     text = "helloü¶Ö"
#     result = num + text
# except TypeError:
#     print("–Ω–µ–º–æ–∂–ª–∏–≤–∞ –∫–æ–º–∞–Ω–¥–∞‚ù§Ô∏è")

# -------------------------------------

# try:
#     age = int(input("enter your age: "))
#     if age < 0:
#         raise ValueError("you mustnt swing‚õîÔ∏è")
#     print("swinging")
# except ValueError as e:
#     print("eror," , e)

# -------------------------------------

# try:
#     milk = int(input('quantity of milk: '))
#     if milk == 0:
#         raise ValueError("we run out of milk")
#     print("cat is drinking milk happily")
# except ValueError as e:
#     print("eror ," , e)
# finally:
#     print("cat is purring and it is gonna sleep")

# -------------------------------------

# try:
#     with open("goiteens.txt", 'r') as file:
#         date = file.read()
        
# except FileNotFoundError:
#     print("–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª 'goiteens.txt' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
# except EOFError:
#     print("–ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Ñ–∞–π–ª—É")
# else:
#     print("–≤—Å–µ –≥–∞—Ä–∞–∑–¥ . –≤–∏–∫–æ–Ω—É—î–º –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–Ω–∏—Ö .....")
#     print(date)
# finally:
#     print("–æ–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# -------------------------------------

# try:
#     number = int(input("enter a number: "))
# except ValueError:
#     print("–≤–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ")
# else:
#     print(f"–≤–≤–µ–¥–µ–Ω–µ —á–∏—Å–ª–æ :{number}")
#     result = number ** 2
#     print(f"–∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ :{result}")
# finally:
#     print("–æ–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# -------------------------------------

# try:
#     with open("goiteens.txt", 'r') as file:
#         data = file.read()
# except FileNotFoundError:
#     print("–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª 'goiteens.txt' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
# except EOFError:
#     print("–ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Ñ–∞–π–ª—É")
# else:
#     print("–≤—Å–µ –≥–∞—Ä–∞–∑–¥ . –≤–∏–∫–æ–Ω—É—î–º –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–Ω–∏—Ö .....")
#     print(data)
#     words = data.split()
#     print(f"–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –≤ —Ñ–∞–π–ª—ñ: {len(words)}")
# finally:
#     print("–æ–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# -------------------------------------

# try:
#     connection = connect_to_database()
#     result = connection.execute_query("SELECT * FROM users")
# except DatabaseError as e:
#     print(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
# else:
#     print("–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
#     for user in result:
#         print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user['name']}, Email: {user['email']}")
# finally:
#     connection.close()
#     print("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ.")

# -------------------------------------

# class MyCustomError(Exception):
#     def __init__(self, message="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞"):
#         self.message = message
#         super().__init__(self.message)

# try:
#     raise MyCustomError("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!")
# except MyCustomError as e:
#     print(f"–û–±—Ä–æ–±–∫–∞ –≤–ª–∞—Å–Ω–æ–≥–æ –≤–∏–Ω—è—Ç–∫—É: {e}")

# -------------------------------------

# class AgeError(Exception):
#     def init(self, age, message="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫"):
#         self.age = age
#         self.message = f"{message}: {age}"
#         super().init(self.message)

# def check_age(age):
#     if age < 18:
#         raise AgeError(age, "–ó–∞–Ω–∞–¥—Ç–æ –º–æ–ª–æ–¥–∏–π")
#     elif age > 100:
#         raise AgeError(age, "–ó–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–∏–π")
#     else:
#         print("–í—ñ–∫ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π")

# try:
#     check_age(int(input("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫: ")))
# except AgeError as e:
#     print(f"–û–±—Ä–æ–±–ª–µ–Ω–æ: {e}")

# -------------------------------------

# class InsufficientFundsError(ValueError):
#     def __init__(self, balance, amount):
#         self.balance = balance
#         self.amount = amount
#         self.message = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤: –¥–æ—Å—Ç—É–ø–Ω–æ {balance}, –ø–æ—Ç—Ä—ñ–±–Ω–æ {amount}"
#         super().__init__(self.message)

# def withdraw(balance, amount):
#     if amount > balance:
#         raise InsufficientFundsError(balance, amount)
#     else:
#         print("–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞. –ó–∞–ª–∏—à–æ–∫:", balance - amount)

# try:
#     withdraw(140 , 100)
# except InsufficientFundsError as e:
#     print(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------------------------

# class TransactionError(Exception):
#     pass

# class InsufficientFundsError(TransactionError):
#     def __init__(self, balance, amount):
#         self.balance = balance
#         self.amount = amount
#         super().__init__(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤: –¥–æ—Å—Ç—É–ø–Ω–æ {balance}, –ø–æ—Ç—Ä—ñ–±–Ω–æ {amount}")

# class UnauthorizedTransactionError(TransactionError):
#     def __init__(self, user):
#         self.user = user
#         super().__init__(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó")

# def process_transaction(user, balance, amount):
#     if user != "admin":
#         raise UnauthorizedTransactionError(user)
#     if amount > balance:
#         raise InsufficientFundsError(balance, amount)
#     print("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")

# try:
#     process_transaction("admin", 100, 50)
# except TransactionError as e:
#     print(f"–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")

# -------------------------------------

class FileError(Exception):
    pass

class FileNotFoundError(FileError):
    def __init__(self, filename):
        self.filename = filename
        super().__init__(f"–§–∞–π–ª '{filename}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

class FileReadError(FileError):
    def __init__(self, filename):
        self.filename = filename
        super().__init__(f"–ù–µ –≤–¥–∞—î—Ç—å—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª '{filename}'")
def read_file(filename):
    if not filename.endswith('.txt'):
        raise FileReadError(filename)
    if filename == "goiteens.txt":
        raise FileNotFoundError(filename)
    print(f"–§–∞–π–ª '{filename}' —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ")

try:
    read_file("goiteens.txt")
except FileError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–æ–º: {e}")